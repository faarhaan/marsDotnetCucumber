// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace ReqnrollProject1.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Education")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class EducationFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Education", "These scenariois are build to detail testing for education Module in Skill Trade " +
                "application", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Education.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create the Education List")]
        [NUnit.Framework.CategoryAttribute("tag1")]
        [NUnit.Framework.TestCaseAttribute("Gordon", "Australia", "B.Sc", "Science", "2010", null)]
        [NUnit.Framework.TestCaseAttribute("Uni-of-Germ", "Germany", "M.Tech", "Computer Sc", "2013", null)]
        [NUnit.Framework.TestCaseAttribute("Quaid-i-Azam", "Pakistan", "B.A", "Science", "2007", null)]
        [NUnit.Framework.TestCaseAttribute("GordonCollege", "Pakistan", "B.A", "Computer Sc", "2003", null)]
        public async global::System.Threading.Tasks.Task CreateTheEducationList(string university, string country, string title, string degree, string graduationYear, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("University", university);
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Degree", degree);
            argumentsOfScenario.Add("GraduationYear", graduationYear);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create the Education List", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.AndAsync("user is in the home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
 await testRunner.WhenAsync(string.Format("I create the university \'{0}\' ,country \'{1}\',  title \'{2}\', degree \'{3}\' and grad" +
                            "uationYear\'{4}\'", university, country, title, degree, graduationYear), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.ThenAsync(string.Format("university \'{0}\' ,country \'{1}\',  title \'{2}\', degree \'{3}\' and graduationYear\'< " +
                            "Graduation Year >\' should be created successfully", university, country, title, degree), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and update a education as previously one I have deleted to obtain a clean " +
            "state")]
        [NUnit.Framework.CategoryAttribute("tag2")]
        [NUnit.Framework.TestCaseAttribute("Gordon", "Germany", "B.Sc", "Science", "2010", "Uni-of-Melb", "Australia", "B.A", "Computer-Sc", "2013", null)]
        [NUnit.Framework.TestCaseAttribute("Uni-of-Germ", "Germany", "M.Tech", "Computer Sc", "2013", "Gordon", "Australia", "B.Sc", "Science", "2010", null)]
        public async global::System.Threading.Tasks.Task CreateAndUpdateAEducationAsPreviouslyOneIHaveDeletedToObtainACleanState(string oldUniversity, string oldCountry, string oldTitle, string oldDegree, string oldGraduationYear, string university, string country, string title, string degree, string graduationYear, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag2"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("oldUniversity", oldUniversity);
            argumentsOfScenario.Add("oldCountry", oldCountry);
            argumentsOfScenario.Add("oldTitle", oldTitle);
            argumentsOfScenario.Add("oldDegree", oldDegree);
            argumentsOfScenario.Add("oldGraduationYear", oldGraduationYear);
            argumentsOfScenario.Add("University", university);
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Degree", degree);
            argumentsOfScenario.Add("GraduationYear", graduationYear);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create and update a education as previously one I have deleted to obtain a clean " +
                    "state", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
    await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 20
    await testRunner.WhenAsync(string.Format("I create the old university \'{0}\', old country \'{1}\' ,  \'{2}\' ,\'{3}\' and \'{4}\' li" +
                            "st successfully", oldUniversity, oldCountry, oldTitle, oldDegree, oldGraduationYear), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
 await testRunner.AndAsync(string.Format("I update the old university  \'{0}\' to \'{1}\',old country  to \'{2}\' , old title to " +
                            "\'{3}\', old degree to \'{4}\' and old graduation year to \'{5}\'", oldUniversity, university, country, title, degree, graduationYear), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
    await testRunner.ThenAsync(string.Format("University \'{0}\', country \'{1}\' , title \'{2}\',degree \'{3}\' and graduationYear \'{4" +
                            "}\' list should be created successfully", university, country, title, degree, graduationYear), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create the Education List with invalid values")]
        [NUnit.Framework.CategoryAttribute("tag3")]
        [NUnit.Framework.TestCaseAttribute("go%$^%don", "Australia", "B.Sc", "Scien**", "2010", null)]
        [NUnit.Framework.TestCaseAttribute("12345", "Germany", "M.Tech", "ar***TS", "2013", null)]
        public async global::System.Threading.Tasks.Task CreateTheEducationListWithInvalidValues(string university, string country, string title, string degree, string graduationYear, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag3"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("University", university);
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Degree", degree);
            argumentsOfScenario.Add("GraduationYear", graduationYear);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create the Education List with invalid values", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 30
 await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 31
 await testRunner.AndAsync("user is in the home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
 await testRunner.WhenAsync(string.Format("I create the university \'{0}\' ,country \'{1}\',  title \'{2}\', degree \'{3}\' and grad" +
                            "uationYear\'{4}\'", university, country, title, degree, graduationYear), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
 await testRunner.ThenAsync(string.Format("university \'{0}\' ,country \'{1}\',  title \'{2}\', degree \'{3}\' and graduationYear\'< " +
                            "Graduation Year >\' should be created successfully as application accept invalid " +
                            "inputs gracefully", university, country, title, degree), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create the Education List with Destructive Data")]
        [NUnit.Framework.CategoryAttribute("tag4")]
        [NUnit.Framework.TestCaseAttribute("Gordonlllllllllllllllllllllllllljigiusgaiugduiagduiahudhusahudgaidhaiusudiuagsfia" +
            "ugsfuaifugaiugfsaiugfiaugfiuasgfiagfuisaufgiaufgaiugiufsgaiufaiufguaisgfaifaifga" +
            "iuaiufgiaufgaifuagfaifgauaigf", "Australia", "B.Sc", "Science", "2010", null)]
        [NUnit.Framework.TestCaseAttribute("@#$SFSF#$@%#@@(&%(@&(%#)@)%#&@)&#%)&@&%)@#%&)@&%)@&%)@&#%)@&%&)@&%)@%*_@)%#_@)&%)" +
            "@#&%)@#(%*(@&%*@)%#*@#&%@*#&%@*)&%*@)%#&@#)(&%(@)#%(@)#%&*^)*$*&$(@_#%&@#%&@_%&(" +
            "@_%&@_(%&@(_&@(%&@#_(%&@#_(#&%@(_", "Australia", "B.Sc", "Arts", "2010", null)]
        public async global::System.Threading.Tasks.Task CreateTheEducationListWithDestructiveData(string university, string country, string title, string degree, string graduationYear, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag4"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("University", university);
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Degree", degree);
            argumentsOfScenario.Add("GraduationYear", graduationYear);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create the Education List with Destructive Data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 41
 await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 42
 await testRunner.AndAsync("user is in the home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
 await testRunner.WhenAsync(string.Format("I create the destructive data university \'{0}\' ,country \'{1}\',  title \'{2}\', degr" +
                            "ee \'{3}\' and graduationYear\'{4}\'", university, country, title, degree, graduationYear), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
 await testRunner.ThenAsync(string.Format("university \'{0}\' ,country \'{1}\',  title \'{2}\', degree \'{3}\' and graduationYear\'< " +
                            "Graduation Year >\' should be created successfully as application handled destruc" +
                            "tive data graacefully", university, country, title, degree), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("@order:18  This test check for valid negative inputs e.g space")]
        [NUnit.Framework.CategoryAttribute("tag5")]
        [NUnit.Framework.TestCaseAttribute("Uni of  Melbourne", "Australia", "B.Sc", "Scien**", "2010", null)]
        public async global::System.Threading.Tasks.Task Order18ThisTestCheckForValidNegativeInputsE_GSpace(string university, string country, string title, string degree, string graduationYear, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag5"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("University", university);
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("Title", title);
            argumentsOfScenario.Add("Degree", degree);
            argumentsOfScenario.Add("GraduationYear", graduationYear);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("@order:18  This test check for valid negative inputs e.g space", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
await testRunner.AndAsync("user is in the home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
 await testRunner.WhenAsync(string.Format("I create the destructive data university \'{0}\' ,country \'{1}\',  title \'{2}\', degr" +
                            "ee \'{3}\' and graduationYear\'{4}\'", university, country, title, degree, graduationYear), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
 await testRunner.ThenAsync(string.Format("space in university \'{0}\' ,country \'{1}\',  title \'{2}\', degree \'{3}\' and graduati" +
                            "onYear\'< Graduation Year >\' should be created successfully as application handle" +
                            "d destructive data graacefully", university, country, title, degree), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
