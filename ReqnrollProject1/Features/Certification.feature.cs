// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace ReqnrollProject1.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Certification")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class CertificationFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Certification", "These scenariois are build to detail testing for certification Module in Skill Tr" +
                "ade application", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Certification.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create the Certification List")]
        [NUnit.Framework.CategoryAttribute("tag6")]
        [NUnit.Framework.TestCaseAttribute("ISTQB", "LinkedIn", "2024", null)]
        [NUnit.Framework.TestCaseAttribute("SQL", "Coursera", "2025", null)]
        [NUnit.Framework.TestCaseAttribute("Python", "LinkedIN", "2024", null)]
        [NUnit.Framework.TestCaseAttribute("Java", "Udemy", "2024", null)]
        public async global::System.Threading.Tasks.Task CreateTheCertificationList(string certificate, string from, string year, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag6"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Certificate", certificate);
            argumentsOfScenario.Add("From", from);
            argumentsOfScenario.Add("Year", year);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create the Certification List", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.AndAsync("user is in the home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
 await testRunner.WhenAsync(string.Format("I create the certification \'{0}\' ,certifiedFrom \'{1}\' and  year \'{2}\'", certificate, from, year), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.ThenAsync(string.Format("certification \'{0}\' ,certifiedFrom \'{1}\' and year \'{2}\' should be created success" +
                            "fully", certificate, from, year), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and update a Certification as previously one I have deleted to obtain a cl" +
            "ean state")]
        [NUnit.Framework.CategoryAttribute("tag7")]
        [NUnit.Framework.TestCaseAttribute("ISTQB", "LinkedIn", "2024", "SQL", "Coursera", "2025", null)]
        public async global::System.Threading.Tasks.Task CreateAndUpdateACertificationAsPreviouslyOneIHaveDeletedToObtainACleanState(string oldCertificate, string oldFrom, string oldYear, string newCertificate, string newFrom, string newYear, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag7"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("oldCertificate", oldCertificate);
            argumentsOfScenario.Add("oldFrom", oldFrom);
            argumentsOfScenario.Add("oldYear", oldYear);
            argumentsOfScenario.Add("newCertificate", newCertificate);
            argumentsOfScenario.Add("newFrom", newFrom);
            argumentsOfScenario.Add("newYear", newYear);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create and update a Certification as previously one I have deleted to obtain a cl" +
                    "ean state", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 20
    await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 21
    await testRunner.WhenAsync(string.Format("I create the old certificate \'{0}\', old certifiedfrom \'{1}\' and  \'{2}\'  list succ" +
                            "essfully", oldCertificate, oldFrom, oldYear), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
 await testRunner.AndAsync(string.Format("I update the old certifiate  \'{0}\' to \'{1}\',old certifiedFrom  to \'{2}\' and old Y" +
                            "ear to \'{3}\'", oldCertificate, newCertificate, newFrom, newYear), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
    await testRunner.ThenAsync(string.Format("certification \'{0}\', certifiedFrom \'{1}\' and Year \'{2}\' list should be created su" +
                            "ccessfully", newCertificate, newFrom, newYear), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create the Certificate List with invalid values")]
        [NUnit.Framework.CategoryAttribute("tag8")]
        [NUnit.Framework.TestCaseAttribute("Sq%^&LLLLL", "Co%$^rsea", "2023", null)]
        [NUnit.Framework.TestCaseAttribute("12345", "Link^GGHHH", "2024", null)]
        public async global::System.Threading.Tasks.Task CreateTheCertificateListWithInvalidValues(string certificate, string from, string year, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag8"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Certificate", certificate);
            argumentsOfScenario.Add("From", from);
            argumentsOfScenario.Add("Year", year);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create the Certificate List with invalid values", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 30
 await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 31
 await testRunner.AndAsync("user is in the home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
 await testRunner.WhenAsync(string.Format("I create the certificate \'{0}\' ,from \'{1}\' and Year\'{2}\'", certificate, from, year), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
 await testRunner.ThenAsync(string.Format("certificate \'{0}\' ,from \'{1}\',  and Year\'{2}\' should be created successfully as a" +
                            "pplication accept invalid inputs gracefully", certificate, from, year), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create the Certificate List with Destructive Data")]
        [NUnit.Framework.CategoryAttribute("tag9")]
        [NUnit.Framework.TestCaseAttribute("ISTQB *****#$&#$@#@#%$#^$^%^%$%^$^$%&%^*&*^&*^&*^&*^&*&^*^(&)#%)#$*%$@)*%)@*%)@*)" +
            "%*)$#^)$#*%)#^@^&)@*)#@*)*%)@#%@&%)@&$)@&%)@&%)@&%)@&%)@&%)$@&#&@)$#&)$%&)#@&%)@" +
            "#&%)@&%)@&%)@&%)@&%)@$%&)T)$$&)$#)@&%)@&%)@%&@%&)@&%)#$@&%$)@%)$^&)^*)%$)^*)$)^*" +
            "$)^^istqbb", "LinkedIn", "2024", null)]
        [NUnit.Framework.TestCaseAttribute("SQ)()()())))))(((((((((((((((((((((((((((((((())))))))))))))))))))))))))())))))))" +
            ")*)!))))))))))))))))))))))!*#)!#*!)*@)*!_!*#_!*#)!@#*!)$@)%*#)$#%^$*)#%@)%*@_#%@" +
            "$#)%*#)$^$#*^#$^)#*$)#^#*$)#^*)#*)^$*)^*#$)^*#)^*#)$^*%)&^)#$*%$)#*$^)#*$#*)$%*#" +
            ")%%$#)%#$)%", "coursera", "2025", null)]
        public async global::System.Threading.Tasks.Task CreateTheCertificateListWithDestructiveData(string certificate, string from, string year, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag9"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Certificate", certificate);
            argumentsOfScenario.Add("From", from);
            argumentsOfScenario.Add("Year", year);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create the Certificate List with Destructive Data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 41
await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 42
 await testRunner.AndAsync("user is in the home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
 await testRunner.WhenAsync(string.Format("I create the certification \'{0}\' ,certifiedFrom \'{1}\' and  year \'{2}\'.", certificate, from, year), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
 await testRunner.ThenAsync(string.Format("certification \'{0}\' ,certifiedFrom \'{1}\' and year \'{2}\' should be created success" +
                            "fully as application handled destructive data gracefully", certificate, from, year), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("@order:18  This test check for valid negative inputs e.g space")]
        [NUnit.Framework.CategoryAttribute("tag10")]
        [NUnit.Framework.TestCaseAttribute("IST    QB", "LinkedIn", "2024", null)]
        public async global::System.Threading.Tasks.Task Order18ThisTestCheckForValidNegativeInputsE_GSpace(string certificate, string from, string year, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag10"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Certificate", certificate);
            argumentsOfScenario.Add("From", from);
            argumentsOfScenario.Add("Year", year);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("@order:18  This test check for valid negative inputs e.g space", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
await testRunner.AndAsync("user is in the home page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
await testRunner.WhenAsync(string.Format("I create the certification \'{0}\' ,certifiedFrom \'{1}\' and  year \'{2}\'.", certificate, from, year), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
await testRunner.ThenAsync(string.Format("certification \'{0}\' ,certifiedFrom \'{1}\' and year \'{2}\' should be created success" +
                            "fully.", certificate, from, year), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
