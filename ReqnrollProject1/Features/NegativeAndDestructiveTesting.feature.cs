// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace ReqnrollProject1.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Language and Skills 2nd Negative Destructive Scenarios")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class LanguageAndSkills2NdNegativeDestructiveScenariosFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Language and Skills 2nd Negative Destructive Scenarios", "  Validate that the system handles invalid, duplicate, and destructive language i" +
                "nputs correctly.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "NegativeAndDestructiveTesting.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add language with invalid values")]
        [NUnit.Framework.CategoryAttribute("order:5")]
        [NUnit.Framework.CategoryAttribute("negative")]
        [NUnit.Framework.CategoryAttribute("invalid")]
        [NUnit.Framework.TestCaseAttribute("12345", "Fluent", null)]
        [NUnit.Framework.TestCaseAttribute("@#$%", "Native/Bilingual", null)]
        [NUnit.Framework.TestCaseAttribute("En!glish", "Fluent", null)]
        public async global::System.Threading.Tasks.Task AddLanguageWithInvalidValues(string languages, string level, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "order:5",
                    "negative",
                    "invalid"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Languages", languages);
            argumentsOfScenario.Add("Level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add language with invalid values", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
    await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
 await testRunner.WhenAsync(string.Format("I create the \'{0}\'and \'{1}\' list successfully", languages, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 7
 await testRunner.ThenAsync(string.Format("language \'{0}\' and level \'{1}\' should be created successfully as application acce" +
                            "pt invalid inputs gracefully", languages, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Prevent duplicate language entry")]
        [NUnit.Framework.CategoryAttribute("order:6")]
        [NUnit.Framework.CategoryAttribute("negativeTesting")]
        [NUnit.Framework.TestCaseAttribute("12345", "Fluent", "This language is already exist in your language list.", null)]
        public async global::System.Threading.Tasks.Task PreventDuplicateLanguageEntry(string languages, string level, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "order:6",
                    "negativeTesting"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Languages", languages);
            argumentsOfScenario.Add("Level", level);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Prevent duplicate language entry", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
    await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
    await testRunner.WhenAsync(string.Format("I try to create duplicate languages   \'{0}\' and level \'{1}\'", languages, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
    await testRunner.ThenAsync("an error message \'<ErrorMesssage>\' should be displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete all languages")]
        [NUnit.Framework.CategoryAttribute("order:7")]
        [NUnit.Framework.CategoryAttribute("negativeTesting")]
        public async global::System.Threading.Tasks.Task DeleteAllLanguages()
        {
            string[] tagsOfScenario = new string[] {
                    "order:7",
                    "negativeTesting"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delete all languages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 24
    await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
    await testRunner.WhenAsync("I delete all languages", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
    await testRunner.ThenAsync("no languages should be present in the list", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("This test handles Destructive actions")]
        [NUnit.Framework.CategoryAttribute("order:8")]
        [NUnit.Framework.CategoryAttribute("DestructiveTesting")]
        [NUnit.Framework.TestCaseAttribute(@"abssssbdmsadajkbdjanmsndlkajlkdsjflskjflkdjsklfdjskfjsakdjfkslfjskdfjlksjfkdsjlkdjfklsjflksdjlfsjfslkdfjlksdfjslkfjslfjdlksjfslkjdfklsjflsjflsjfldsjflsslsjfdslsljfsldjflslsdjflsjflsjfdlsjflslsdjlsjfdldsjfldsjflsjlfdsjlfjslfjlsdfjlsjflsdjfklsjkdfsjklfjlfsjdlfsjl", "Fluent", null)]
        [NUnit.Framework.TestCaseAttribute(@"@##$$#$$%$%%$^%&%^&^&^&%^&^*&^*&*&(*(*(&*(&*&*^&^&%^%&%^$^%^&$%^$^$%#%#%$#%#$%#%#$%#%#%#%#$%#%#%$%#%$%#%#%$%#%$%#%#%#%#%#%$%^%^%&^&^&^&^&$^$%#%$#%%&&*&*(*()(_)_()*(&*&^&*^&^*^*^*%^&^&&%&%&^%$^%%^&%&*^&%&^%&%&&&%&^&*^&^&%&*^*&^**^*&(&(*(*(*(&*(*(^*^&%^&^&*^%&^&^%", "Native/Bilingual", null)]
        public async global::System.Threading.Tasks.Task ThisTestHandlesDestructiveActions(string languages, string level, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "order:8",
                    "DestructiveTesting"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Languages", languages);
            argumentsOfScenario.Add("Level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("This test handles Destructive actions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 29
    await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 30
 await testRunner.WhenAsync(string.Format("I create the language \'{0}\' and level \'{1}\' with destructive input", languages, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
    await testRunner.ThenAsync(string.Format("the language \'{0}\' and level \'{1}\' should be handled gracefully", languages, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("This test check for valid inputs e.g space")]
        [NUnit.Framework.CategoryAttribute("order:9")]
        [NUnit.Framework.CategoryAttribute("negative")]
        [NUnit.Framework.CategoryAttribute("validinputs")]
        [NUnit.Framework.TestCaseAttribute("eng lish", "Fluent", "Please enter language and level", null)]
        public async global::System.Threading.Tasks.Task ThisTestCheckForValidInputsE_GSpace(string languages, string level, string expectedMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "order:9",
                    "negative",
                    "validinputs"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Languages", languages);
            argumentsOfScenario.Add("Level", level);
            argumentsOfScenario.Add("ExpectedMessage", expectedMessage);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("This test check for valid inputs e.g space", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 40
   await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 41
 await testRunner.WhenAsync(string.Format("I create the language \'{0}\' and level \'{1}\' with empty space", languages, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
    await testRunner.ThenAsync(string.Format("language \'{0}\' and level \'{1}\' should be created", languages, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
