// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace ReqnrollProject1.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Skills")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class SkillsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Skills", "Skill Feature file lists my tech skills for audience to see plus the detail Testi" +
                "ng of Skill Moudele in the Mars Project.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Skills.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("@order:11  Create My Skill list")]
        [NUnit.Framework.TestCaseAttribute("Dotnet", "Intermediate", null)]
        [NUnit.Framework.TestCaseAttribute("C-Sharp", "Intermediate", null)]
        [NUnit.Framework.TestCaseAttribute("Python", "Intermediate", null)]
        [NUnit.Framework.TestCaseAttribute("Java", "Beginner", null)]
        [NUnit.Framework.TestCaseAttribute("Selenium", "Intermediate", null)]
        [NUnit.Framework.TestCaseAttribute("SQL", "Intermediate", null)]
        [NUnit.Framework.TestCaseAttribute("API", "Beginner", null)]
        [NUnit.Framework.TestCaseAttribute("Postman", "Beginner", null)]
        public async global::System.Threading.Tasks.Task Order11CreateMySkillList(string skills, string level, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Skills", skills);
            argumentsOfScenario.Add("Level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("@order:11  Create My Skill list", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
    await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
 await testRunner.WhenAsync(string.Format("I create the skill \'{0}\'and level\'{1}\' list successfully", skills, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 7
 await testRunner.ThenAsync(string.Format("skills \'{0}\' and level\'{1}\' list should be created successfully", skills, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("@order:13 Create and update a skill as previously skills are deleted")]
        [NUnit.Framework.TestCaseAttribute("Dotnet", "Intermediate", "Selenium", "Expert", null)]
        [NUnit.Framework.TestCaseAttribute("C-Sharp", "Intermediate", "SQL", "Beginner", null)]
        [NUnit.Framework.TestCaseAttribute("Python", "Intermediate", "API", "Expert", null)]
        [NUnit.Framework.TestCaseAttribute("Java", "Beginner", "Postman", "Expert", null)]
        [NUnit.Framework.TestCaseAttribute("Selenium", "Intermediate", "Dotnet", "Expert", null)]
        [NUnit.Framework.TestCaseAttribute("SQL", "Intermediate", "C-Sharp", "Expert", null)]
        [NUnit.Framework.TestCaseAttribute("API", "Beginner", "Python", "Expert", null)]
        [NUnit.Framework.TestCaseAttribute("Postman", "Beginner", "Java", "Intermediate", null)]
        public async global::System.Threading.Tasks.Task Order13CreateAndUpdateASkillAsPreviouslySkillsAreDeleted(string oldSkill, string oldLevel, string newSkill, string level, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("oldSkill", oldSkill);
            argumentsOfScenario.Add("oldLevel", oldLevel);
            argumentsOfScenario.Add("NewSkill", newSkill);
            argumentsOfScenario.Add("Level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("@order:13 Create and update a skill as previously skills are deleted", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 21
    await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 22
    await testRunner.WhenAsync(string.Format("I create the Oldskill \'{0}\' and Oldlevel \'{1}\' list successfully", oldSkill, oldLevel), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
    await testRunner.AndAsync(string.Format("I update the Oldskill \'{0}\' to \'{1}\' and Oldlevel  to \'{2}\'", oldSkill, newSkill, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
    await testRunner.ThenAsync(string.Format("skills \'{0}\' and level \'<NewLevel>\' list should be created successfully", newSkill), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("@order:14 Add skills with invalid values")]
        [NUnit.Framework.TestCaseAttribute("do%$^%net", "Beginner", null)]
        [NUnit.Framework.TestCaseAttribute("12345", "Beginner", null)]
        [NUnit.Framework.TestCaseAttribute("P!thon!", "Expert", null)]
        public async global::System.Threading.Tasks.Task Order14AddSkillsWithInvalidValues(string skills, string level, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Skills", skills);
            argumentsOfScenario.Add("Level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("@order:14 Add skills with invalid values", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
   await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 39
   await testRunner.WhenAsync(string.Format("I create the skills \'{0}\' and Level \'{1}\' list successfully", skills, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
 await testRunner.ThenAsync(string.Format("skills \'{0}\' and level \'{1}\' should be created successfully as application accept" +
                            " invalid inputs gracefully", skills, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("@order:15 Add duplicate Skills")]
        [NUnit.Framework.TestCaseAttribute("Selenium", "Intermediate", "", null)]
        [NUnit.Framework.TestCaseAttribute("Selenium", "Intermediate", "This Skill is already exist in your skill list", null)]
        public async global::System.Threading.Tasks.Task Order15AddDuplicateSkills(string skills, string level, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Skills", skills);
            argumentsOfScenario.Add("Level", level);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("@order:15 Add duplicate Skills", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 50
await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 51
await testRunner.WhenAsync(string.Format("I create duplicate Skills \'{0}\' and Level \'{1}\'.", skills, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
await testRunner.ThenAsync(string.Format("error message \'{0}\' should be displayed.", errorMessage), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("@order:17  Add Destructive Data")]
        [NUnit.Framework.TestCaseAttribute("pythonnfsilsfkfslkfklsklfjksjfldsjkflsjflksjflkjslkjfklsjlkfjlksjlfjsdljflsjflsjl" +
            "fjsljdljflsjfdlsjlfjslfjsljflsjdkslkfdjsljflksjdfkljslfjskldflsjflsdjlfjslfjsldj" +
            "flsjflsjlfjlsjflsjfjsl", "Expert", null)]
        [NUnit.Framework.TestCaseAttribute("@#$$$$##########%%%%%%%%^$%$%%%%%%%%%%%%%&^&^&^&^&&^^&^^&^&^&^&^&^&&*^*&^*^&*^&^*" +
            "(%&*($&%*^&&*^&^*&^%*^&*&%(#*($#(&%(*&%($&*%^$(^*^&^*&^*^^&^*&^*^&^*^&^*(&^(%*($" +
            ")*%(^*%($&(*#&($&%(*^%(%*(%%(%*^", "Beginner", null)]
        public async global::System.Threading.Tasks.Task Order17AddDestructiveData(string skills, string level, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Skills", skills);
            argumentsOfScenario.Add("Level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("@order:17  Add Destructive Data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 61
await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 62
await testRunner.WhenAsync(string.Format("I create the Skill \'{0}\' and level \'{1}\' with destructive data", skills, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 63
await testRunner.ThenAsync(string.Format("Skill \'{0}\' and level \'{1}\' should be handled gracefully", skills, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("@order:18  This test check for valid negative inputs e.g space")]
        [NUnit.Framework.TestCaseAttribute("Pyth on", "Expert", null)]
        public async global::System.Threading.Tasks.Task Order18ThisTestCheckForValidNegativeInputsE_GSpace(string skills, string level, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Skills", skills);
            argumentsOfScenario.Add("Level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("@order:18  This test check for valid negative inputs e.g space", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 71
await testRunner.GivenAsync("I login to skillShare portal successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 72
await testRunner.WhenAsync(string.Format("I create the Skills \'{0}\' and level \'{1}\' with empty space", skills, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
await testRunner.ThenAsync(string.Format("Skills\'{0}\' and level \'{1}\' should be handled gracefully", skills, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
